- name: Create users for K8s cluster
  user:
    name: "{{ item.name }}"
  loop: "{{ users }}"

- name: Create serviceaccount in kube-system namespace for each user
  command: kubectl -n kube-system create serviceaccount {{ item.name }}-cluster-admin
  loop: "{{ users }}"
  ignore_errors: true

- name: Create secret for each user
  shell: |
    cat << EOF | kubectl apply -f -
    apiVersion: v1
    kind: Secret
    metadata:
      name: {{ item.name }}-cluster-admin-secret
      namespace: kube-system
      annotations:
        kubernetes.io/service-account.name: {{ item.name }}-cluster-admin
    type: kubernetes.io/service-account-token
    EOF
  loop: "{{ users }}"
  ignore_errors: true

- name: Create ClusterRole for each user
  shell: |
    cat << EOF | kubectl apply -f -
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: {{ item.name }}-cluster-admin
    rules:
    - apiGroups: [""]
      resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
      verbs: ["get", "list", "watch"]
    - apiGroups:
      - extensions
      resources:
      - ingresses
      verbs: ["get", "list", "watch"]
    EOF
  loop: "{{ users }}"


- name: Create ClusterRoleBinding for each user
  shell: |
    cat << EOF | kubectl apply -f -
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: {{ item.name }}-cluster-admin-binding
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: {{ item.name }}-cluster-admin
    subjects:
    - kind: ServiceAccount
      name: {{ item.name }}-cluster-admin
      namespace: kube-system
    EOF
  loop: "{{ users }}"

- name: Generate kubeconfig for each user
  shell: |
    export SA_SECRET_TOKEN=$(kubectl -n kube-system get secret/{{ item.name }}-cluster-admin-secret -o=go-template='{{"{{"}}.data.token{{"}}"}}' | base64 --decode)
    export FRIENDLY_CLUSTER_NAME=k8s-bare-metal-0
    export CLUSTER_NAME=$(kubectl config current-context)
    export CURRENT_CLUSTER=$(kubectl config view --raw -o=go-template='{{"{{"}}range .contexts{{"}}"}}{{"{{"}}if eq .name "'''${CLUSTER_NAME}'''"{{"}}"}}{{"{{"}} index .context "cluster" {{"}}"}}{{"{{"}}end{{"}}"}}{{"{{"}}end{{"}}"}}')
    export CLUSTER_CA_CERT=$(kubectl config view --raw -o=go-template='{{"{{"}}range .clusters{{"}}"}}{{"{{"}}if eq .name "'''${CURRENT_CLUSTER}'''"{{"}}"}}"{{"{{"}}with index .cluster "certificate-authority-data" {{"}}"}}{{"{{"}}.{{"}}"}}{{"{{"}}end{{"}}"}}"{{"{{"}} end {{"}}"}}{{"{{"}} end {{"}}"}}')
    export CLUSTER_ENDPOINT=$(kubectl config view --raw -o=go-template='{{"{{"}}range .clusters{{"}}"}}{{"{{"}}if eq .name "'''${CURRENT_CLUSTER}'''"{{"}}"}}{{"{{"}} .cluster.server {{"}}"}}{{"{{"}}end{{"}}"}}{{"{{"}} end {{"}}"}}')
    echo "${SA_SECRET_TOKEN},${FRIENDLY_CLUSTER_NAME},${CLUSTER_NAME},${CURRENT_CLUSTER},${CLUSTER_CA_CERT},${CLUSTER_ENDPOINT}"
  register: kubeconfig_vars
  loop: "{{ users }}"

- name: Ensure .kube directory exists for each user
  file:
    path: "/home/{{ item.item.name }}/.kube"
    state: directory
  loop: "{{ kubeconfig_vars.results }}"

- name: Create kubeconfig for each user
  template:
    src: kubeconfig.j2
    dest: "/home/{{ item.item.name }}/.kube/config"
  loop: "{{ kubeconfig_vars.results }}"
  vars:
    user_name: "{{ item.item.name }}"
    sa_secret_token: "{{ item.stdout.split(',')[0] }}"
    friendly_cluster_name: "{{ item.stdout.split(',')[1] }}"
    cluster_name: "{{ item.stdout.split(',')[2] }}"
    current_cluster: "{{ item.stdout.split(',')[3] }}"
    cluster_ca_cert: "{{ item.stdout.split(',')[4] }}"
    cluster_endpoint: "{{ item.stdout.split(',')[5] }}"